#+TITLE: Emacs-lisp Packaging Tips

* Configure 和 library 有什么区别
从 Emacs-lisp 语言角度来说，两者没有多大的区别，可能写 library 的时候，
Emacs-lisp 语言应用的更加规范一点。

但编写 configure 和编写 library 需要遵循的理念有很大不同：
1. Configure 是写给自己用的，如果其他同学使用你的 configure 出了问题，
   那么他只能自认倒霉，你可以不负任何责任。
2. Library 编写出来主要是给其他人使用的，如果出了问题，维护者是有直接
   责任的:-)

* Library 和 package 有什么区别
Emacs-lisp 很早就有了 library 的概念， 但 package 的概念是随着
package.el 和 elpa 引入的，时间不是很长。

简单来说：package 是 library 的发布形式，一个 package 可以是一个
单独的 library 文件，也可以是一组功能联系紧密的 library 文件打包
生成的 zip 文件。

* 谁应该读这个文档
符合下面特征的同学值得读一下这个文档：

1. 刚刚从编写 Emacs configure 转到编写 emacs library
2. 希望将这个（些） library 打包成一个 package
3. 愿意将这个 package 和其他同学共享。

* library 编写原则
1. 成本效益原则：
   1. 编写的 library 不能含有恶意代码，不能窃取用户隐私。
   2. 编写的 library 值得用户花时间和精力去学习使用，
      重复制造轮子的决定要慎重。
2. 正确使用 Emacs-lisp
3. 尊重社区惯例原则：主要是使用公认的代码缩进方式，让代码容易维护等。
4. 尊重用户选择原则：
   1. 不能随意覆盖自己 library 的用户接口变量
   2. 不能随意覆盖其他 library 的任何全局变量，
      包含用户接口变量和内部使用全局变量。
5. 用户知情同意原则：当一个 library *必须* 覆盖用户接口变量时，
   这个 library 的维护者 *尽自己最大的努力* 让用户知道哪些用户
   接口变量被覆盖了，这样做的话，即使出问题，用户也容易调试。

* library 命名
给你的 library 命名这个工作非常非常重要，千万不能马虎，因为对
一个已经存在的 library 重命名是非常麻烦的事情，需要做许许多多
兼容性工作。

Emacs-lisp 和其他 lisp 不同，Emacs-lisp 的全局变量的作用范围非常大，
只要一个 library 加载了，那么在当前 Emacs session 的任何代码处，都
可以随意的访问和设置这个 library 的所有全局变量。

Emacs-lisp 这个特性很容易发生变量冲突，为了防止变量冲突，Emacs 社区
有这么一个惯例： 一个 library 的全局变量，函数定义以及宏定义等，名字
都应该使用统一的前缀，比如： company 的全局变量，命名时都使用
"company-"  前缀。

Emacs-lisp 语言本身对 library 的名称没有多少限制，但并不代表你可以
随意使用任何字符串做为一个 library 的名称，建议新手遵循以下惯例：
1. library 的名字不能是其他 library 正在使用或者曾经使用过的名字。
2. library 的名字 *只能使用* 小写字母，数字和下划线。
3. library 的名字要好记，好写，好认。
   1. 最好是 *一个* 单词或者 *一个* 缩写，比如：company 或者 elpa 。
   2. 最好不要超过2个单词。
   3. 不要太长， *个人感觉* 最好不超过15个字符。
4. library 的前缀最好使用 library 名称加连字符。

* package 命名
最好的选择是：package 的名字就选 library 的名字。

* 选择合适的协议
TODO
* 选择合适的发布方式
到目前为止，最常见的发布途径有两种：

1. [[https:/melpa.org][Melpa]]
2. [[https://elpa.gnu.org/][Elpa]]

library 的维护者应该早做决定，因为 elpa 要求 library
代码的所有供献者都签署 GNU 的纸质协议，如果这个事情在
library 编写的早期不作的话，后面的工作量就大了。

Melpa 的限制相对比较小了。

* 创建 library 框架文件
TODO

* 了解 Emacs-lisp Style
仔细阅读下面这个项目中的所有文档：

https://github.com/bbatsov/emacs-lisp-style-guide

* 定义变量的正确方式
Emacs-lisp 有许多定义变量的方法，但下面几种是最最常用的。

1. 定义一个用户接口变量
   #+BEGIN_SRC emacs-lisp
   (defcustom elptips-name "elptips-name"
     "Elptips's name.")
   #+END_SRC

   这是最正统的方式，但许多人嫌麻烦，最开始都使用下面的方式
   定义一个用户接口变量，等到 library 相对稳定后，再改用上面的
   方式：

   #+BEGIN_SRC emacs-lisp
   (defvar elptips-name "elptips-name"
     "Elptips's name.")
   #+END_SRC
2. 定义一个 library *内部使用* 的全局变量
   #+BEGIN_SRC emacs-lisp
   (defvar elptips--name "elptips--name"
     "Elptips's name.")
   #+END_SRC
   注：Lisp 有一个惯例：使用前缀加 ~--~ 来表示这个全局变量是
   library 内部使用的全局变量，用户不应该使用它，library 的维护者可以
   随意添加，删除一个内部全局变量，可以对一个内部全局变量任意赋值，
   更重要的是 library 维护者不需要维护内部全局变量的向后兼容性。
3. 定义一个局部变量
   #+BEGIN_SRC emacs-lisp
   (let ((a 1)
         (b 2)
         c)
     (+ a b))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (let* ((a 1)
          (b 2)
          (c (+ a b)))
     c)
   #+END_SRC

* 变量赋值的正确方式
简单来说，变量必须先被定义，才能对其赋值。

可惜的是：这个规则非常简单，但新手往往不太注意。

在 Emacs-lisp 中，最常用的变量赋值操作符是：setq,
在一个 library 中，一般只能出现下面 *两种* setq 赋值结构：
1. 对一个 library *内部使用* 的全局变量进行赋值：
   #+BEGIN_SRC emacs-lisp
   (defvar elptips--name "elptips-name"
     "Elptips's name.")
   (setq elptips--name "elptips-name2")
   #+END_SRC
2. 对一个局部变量进行赋值：
   #+BEGIN_SRC emacs-lisp
   (let ((a 1)
         (b 2)
         c)
     (setq c (+ a b)))
   #+END_SRC

其他形式的 setq 赋值结构都是有问题的：

1. 在 library 中对一个用户接口变量进行赋值

   #+BEGIN_SRC emacs-lisp
   (defcustom elptips-name "elptips-name"
     "Elptips's name.")
   (setq elptips-name "elptips-name2")
   #+END_SRC

   这种做法是最应该避免的！！！

   无论这个用户接口变量属于自己 library 还是其他 library，都不应该
   这么做，因为它直接违反了 “尊重用户选择” 这个原则，在一定条件下，
   加载 library 会覆盖用户的设置，比如：

   #+BEGIN_SRC emacs-lisp
   (setq elptips-name "elptips-name3")
   (require 'elptips)
   #+END_SRC
2. 不能直接使用 setq 来定义变量

   setq 是变量赋值操作符，不是变量定义操作符，但 setq 有一个特性： 如果被赋值的变量不存在，
   setq 会首先定义这个 *全局变量*, 然后再赋值，下面两个例子是等价的：

   #+BEGIN_SRC emacs-lisp
   (setq elptips-name "elptips-name2")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (defvar elptips-name nil) ;这个全局变量会被用户当成用户接口变量
   (setq elptips-name "elptips-name2")
   #+END_SRC

   我个人感觉，Emacs-lisp 给 setq 添加这个特性是为了编写 configure 时省事，
   但编写 library 的时候，这样做有覆盖用户设置的风险。

3. 给一个没有定义的 *局部变量* 赋值

   #+BEGIN_SRC emacs-lisp
   (let ((a 1)
         (b 2))
     (setq c (+ a b)))
   #+END_SRC

   这个例子本质是定义并赋值了一个 *全局变量* c,
   正确的写法应该是：

   #+BEGIN_SRC emacs-lisp
   (let ((a 1)
         (b 2)
         c) ; 这个 c 绝对不能遗漏
     (setq c (+ a b)))
   #+END_SRC

   由于这种方式很容易出现遗漏，而且带来的问题不太容易调试（
   因为容易覆盖 Emacs-lisp 核心使用的全局变量），所以建议使用
   let* 来处理类似情况：

   #+BEGIN_SRC emacs-lisp
   (let* ((a 1)
          (b 2)
          (c (+ a b)))
     c)
   #+END_SRC

* 对变量赋值的再思考
通过 “变量赋值的正确方式” 的讨论，我们可以发现，在编写 library 的
时候，setq 最合理的使用方式只有 *一种* , 即：对 library 内部使用的
全局变量赋值：

#+BEGIN_SRC emacs-lisp
(defvar elptips--name "elptips-name"
  "Elptips's name.")
(setq elptips--name "elptips-name2")
#+END_SRC

对 *局部变量* 赋值时要慎用 setq, 优先考虑使用 let* , 如果必须使用，
一定要确保这个局部变量已经在 let 结构中定义了。

在其他情况使用 setq 可能就是滥用了，当然我这里只是说 *可能*, 只要你的
使用方式遵循 library 编写原则，那也许就是合理的用法 :-)
* 如果必须设置用户接口变量，该怎么办？
虽然 library 维护者不应该随意覆盖用户接口变量，但现实情况是：
我们有时候必须这样做，理想很丰满，但现实却很骨感。。。

这时候，我们就要退而求其次，遵循 "用户知情同意原则", 尽最大努力
减小影响范围。

常见的方式有四种，但一般只建议使用前两种方式，后面两种方式是
 *黑科技*, 一定要谨慎使用，不合理的应用会让你遭到唾弃。

1. 在 library 文档中指导用户自己设置

   这种方法是最稳妥可靠的，大多数情况下，我们只能使用这种方式。

2. 使用 let 表达式来 *局部覆盖* 一个用户接口变量

   #+BEGIN_SRC emacs-lisp
   (let ((pkgxxx-name "pkgxxx-name5"))
     (pkgxxx-return-name))
   #+END_SRC

   在 let 定义的局部范围， pkgxxx-name 会被强制绑定到另外一个值，
   这个用法 *非常的常用* ，当满足下面两个条件时，就可以这么用。
   1. library 所依赖的函数无法通过参数设置，只能通过全局变量来改变其行为。
   2. 对这个全局变量局部绑定，不会对所依赖的 library 造成影响。

   比如：

   #+BEGIN_SRC emacs-lisp
   (defun pkgxxx-return-name ()
     (message pkgxxx-name))

   (defun pkgxxx-return-fakename ()
     (interactive)
     (let ((pkgxxx-name "pkgxxx-name5"))
       (pkgxxx-return-name)))
   #+END_SRC

   注：这种方式让熟悉词法作用域的同学很不习惯，确实是这样子的，在 Emacs-lisp
   中全局变量无论什么时候，都是按照动态作用域的规则来处理。

3. 使用激活函数来覆盖用户接口变量

   #+BEGIN_SRC emacs-lisp
   (defun elptip-pkgxxx-enable ()
     (interactive)
     (setq pkgxxx-name "pkgxxx-name5")
     (message "elptips: `pkgxxx-name' has been override."))
   #+END_SRC

   这种方式要注意：
   1. 激活函数不能默认运行，只能通过文档告诉用户在它们的配置中添加。
   2. 如果无法做到完全无影响，就要提示用户哪个或者哪些 “用户接口变量” 被强制覆盖了。
   3. 最好告诉用户，如何简单的取消激活，如果可以，添加一个 disable 函数，
      但令人遗憾的是，disable 函数看似容易编写，其实往往是不可行的。
      像这种覆盖用户接口变量的激活函数，一般也只能让用户删除这行配置，
      然后重启 emacs, 别无它法。

   比如下面这个例子，看似可行，实际是不合理的。。。。

   #+BEGIN_SRC emacs-lisp
   (defun elptip-pkgxxx-disable ()
     (interactive)
     (setq pkgxx-name "pkgxxx-name")))
   #+END_SRC

   除非万般无奈，这种方式不建议使用。

4. 使用激活函数来覆盖影响用户接口变量的函数

   假设 pkgxxx 中有一个函数专门用来处理用户
   接口 pkgxxx-name :

   #+BEGIN_SRC emacs-lisp
   (defun pkgxxx-return-name ()
     (message pkgxxx-name))
   #+END_SRC

   我们可以通过替换 `pkgxxx-return-name' 这个函数来改变
   其行为，但我们不能直接在 elptips 包中添加一个新的
   `pkgxxx-return-name' 函数，这种偷偷摸摸的覆盖让遇到
   问题的用户很难调试，我们需要使用 emacs 内置的 nadvice 功能：

   #+BEGIN_SRC emacs-lisp
   (defun elptips-pkgxxx-return-name ()
     (let ((pkgxxx-name "pkgxxx-name5"))
       (funcall orig-func)))

   (advice-add 'pkgxxx-return-name
               :around #'elptips-pkgxxx-return-name)
   #+END_SRC

   这样做的话，用户在阅读 `pkgxxx-return-name' 的文档
   时，就可以发现这个函数被哪个函数 advice 了，算是
   一种知情同意，这种方式的另外一种好处是可以写出一个
   比较靠谱的 disble 函数。

   不过即便如此， emacs 官方社区也是不建议使用这种机制的
   这里还是那句话，除非万般无奈，不建议使用。
* 养成使用代码检查工具的习惯
我们有许多 Emacs-lisp 代码检查工具可以用来检查代码中
存在的问题：

1. checkdoc
2. elint
3. package-lint
5. byte-compile-file (用于检查 Emacs-lisp 编译错误)

我的建议是：代码提交之前，都应该用这些工具检查一遍，
去除所有的警告和错误后再提交，如果检查的频率太低，
可能你就没有动力做这个事情了。


* 未完待续。。。
* 尾注

# Local Variables:
# coding: utf-8-unix
# End:
